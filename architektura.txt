APLIKACJA: DZIENNIK TRANSAKCJI AI 3.0 - ARCHITEKTURA I DOKUMENTACJA
===========================================================================

UWAGA: Ten plik jest uzupełnieniem README.md - skierowany do programistów i AI
Dla ogólnego opisu funkcjonalności i instrukcji użytkownika zobacz README.md

OPIS TECHNICZNY:
----------------
Aplikacja służy do analizy transakcji tradingowych z możliwością obliczania maksymalnego Take Profit dla pozycji przed uderzeniem Stop Loss. Program analizuje dane świeczkowe (OHLC) z bazy SQLite i oblicza różne scenariusze TP, w tym z funkcją Break Even.

> Szczegółowy opis funkcjonalności dla użytkowników dostępny w README.md

NOWE FUNKCJONALNOŚCI (CZERWIEC 2025):
======================================
✅ Statystyka winrate w głównym oknie - wyświetla liczbę wygrywających/przegrywających trejdów i winrate w %
✅ SL stały per instrument - różne domyślne wartości SL dla różnych instrumentów
✅ Konfiguracja SL w pliku config/sl_config.py:
    - us30.cash: -20 pkt
    - us100.cash, ger40.cash: -10 pkt
    - XAUUSD: -5 pkt
✅ System mapowania ticketów instrumentów:
    - Okno "Tickety instrumentów" w menu Narzędzia
    - Mapowanie różnych nazw (us100, nq100, nasdaq) na główne instrumenty (NASDAQ)
    - Domyślne instrumenty: DAX, NASDAQ, DJ, GOLD, BTC
    - WAŻNE: System umożliwia granie u różnych brokerów z różnymi ticketami
    - Przykład: DAX może być "ger40.cash" u jednego brokera, "germany40" u innego
    - Konfiguracja w pliku instrument_tickets.json z mapowaniem nazw na główne instrumenty
✅ ** NAJNOWSZE (22.06.2025) ** System edycji z nawigacją:
    - Tylko jedno okno edycji w danym czasie
    - Przyciski Next/Prev do nawigacji między pozycjami
    - Automatyczny zapis przed otwarciem nowej pozycji
    - Zapamiętywanie pozycji i rozmiarów okien
    - Komunikacja z MQL5 przez plik E:\Trading\current_edit_ticket.txt
    - Menu ustawień z opcjami reset pozycji okien

KOMPONENTY TECHNICZNE:
----------------------
1. GUI z tkinter - główne okno, przeglądarka, kalkulator TP
2. Warstwa dostępu do danych SQLite z modelami i zapytaniami
3. Algorytmy kalkulacji TP z analizą świeczkową
4. System Break Even z przesuwaniem SL
5. Eksport wyników i szczegółowe logowanie
6. ** NOWY ** Konfiguracja SL stałego per instrument
7. ** NOWY ** Statystyki winrate w głównym oknie
8. ** NOWY ** System mapowania ticketów instrumentów

> Szczegółowy opis funkcjonalności dostępny w README.md

STRUKTURA KATALOGÓW:
===================
E:\Trading\dziennik\python\Dziennik_claude\
├── config/
│   ├── __init__.py
│   ├── database_config.py      # Konfiguracja połączeń do bazy (DB_PATH, AVAILABLE_INSTRUMENTS)
│   ├── field_definitions.py    # Definicje pól formularza
│   ├── sl_config.py           # ** NOWY ** Konfiguracja SL stałego per instrument
│   ├── instrument_tickets_config.py # ** NOWY ** Mapowanie ticketów instrumentów
│   └── window_config.json     # ** NOWY ** Plik konfiguracyjny pozycji i rozmiarów okien
├── database/
│   ├── __init__.py
│   ├── connection.py           # Zarządzanie połączeniami SQLite
│   ├── models.py              # Modele danych (Position, Candle, TPCalculationResult)
│   └── queries.py             # Zapytania SQL (PositionQueries, CandleQueries, TPCalculationQueries)
├── gui/
│   ├── __init__.py
│   ├── main_window.py         # ** ZAKTUALIZOWANY ** Główne okno aplikacji z menu i zapisywaniem pozycji
│   ├── data_viewer.py         # ** ZAKTUALIZOWANY ** Przeglądarka transakcji z winrate i nowym systemem edycji
│   ├── edit_dialog.py         # ** NOWY ** Okno edycji transakcji (zastąpił kod w data_viewer.py)
│   ├── edit_manager.py        # ** NOWY ** Singleton manager okien edycji
│   ├── navigation_handler.py  # ** NOWY ** Handler nawigacji Next/Prev między pozycjami
│   ├── window_config.py       # ** NOWY ** Manager konfiguracji pozycji i rozmiarów okien
│   ├── tp_calculator.py       # *** GŁÓWNE OKNO KALKULATORA TP ***
│   ├── instrument_tickets.py  # ** NOWY ** Okno konfiguracji mapowania ticketów
│   └── widgets/
│       ├── __init__.py
│       ├── custom_entries.py  # CustomEntry, SetupEntry, NumericEntry
│       └── date_picker.py     # ** ZAKTUALIZOWANY ** DateRangePicker, InstrumentSelector, StopLossSelector
├── calculations/               # *** RDZEŃ APLIKACJI - OBLICZENIA TP ***
│   ├── __init__.py
│   ├── tp_calculator.py       # ** ZAKTUALIZOWANY ** Główna logika kalkulacji TP z obsługą SL per instrument
│   ├── candle_analyzer.py     # *** ANALIZA ŚWIECZEK - TUTAJ SĄ ALGORYTMY TP ***
│   └── position_analyzer.py   # ** ZAKTUALIZOWANY ** Analiza pozycji z obsługą SL per instrument
├── utils/
│   ├── __init__.py
│   ├── date_utils.py          # Konwersje dat (unix_to_datetime, get_day_end_unix)
│   └── formatting.py         # Formatowanie danych (format_points, format_price)
├── main.py                    # Główny plik uruchomieniowy
├── requirements.txt           # Zależności
└── architektura.txt          # Ten plik

KLUCZOWE PLIKI DO MODYFIKACJI:
==============================

1. calculations/candle_analyzer.py
   *** NAJWAŻNIEJSZY PLIK - TUTAJ SĄ ALGORYTMY OBLICZANIA TP ***
   - calculate_max_tp_basic() - obliczenia TP bez BE
   - calculate_max_tp_with_be() - obliczenia TP z Break Even
   - get_candles_for_position() - pobieranie świeczek z bazy
   
2. calculations/tp_calculator.py
   - calculate_tp_for_date_range() - główna metoda kalkulacji dla zakresu dat
   - _calculate_tp_for_position() - kalkulacja dla pojedynczej pozycji
   
3. gui/tp_calculator.py
   - TPCalculatorWindow - główne okno GUI kalkulatora
   - Parametry: daty, instrumenty, SL, BE, spread, detailed_logs

BAZA DANYCH:
============
- SQLite z tabelami pozycji i świeczek
- Pozycje: tabela 'positions' z polami ticket, open_time, type, symbol, open_price, sl, sl_recznie, etc.
- Świeczki: tabele per instrument (np. "GER40.cash ", "XAUUSD") z polami time, open, high, low, close
- Wyniki TP: tabela tp_calculation_results

ALGORYTM KALKULACJI TP:
=======================

PODSTAWOWY (bez BE):
1. Pobierz świeczki od 60s przed otwarciem pozycji do końca dnia
2. Dla każdej świeczki sprawdź czy cena uderzyła w SL:
   - BUY: czy candle.low <= stop_loss + spread
   - SELL: czy candle.high >= stop_loss - spread
3. Jeśli nie uderzył w SL, oblicz maksymalny zysk na tej świeczce
4. Zapisz najwyższy zysk, zwróć go gdy SL zostanie uderzony

Z BREAK EVEN:
1. Podobnie jak podstawowy, ale dodatkowo sprawdzaj próg BE
2. Gdy zysk >= prog_aktywacji_be, przesuń SL na open_price +/- be_offset
3. *** WAŻNE: Gdy BE jest aktywowane na świeczce, nowy SL sprawdzany od NASTĘPNEJ świeczki ***
4. Zwróć maksymalny TP osiągnięty przed uderzeniem w nowy SL

OSTATNIE ZMIANY (GRUDZIEŃ 2024):
================================
✅ Poprawka: Program zaczyna obliczenia od świeczki otwarcia pozycji (nie od następnej)
✅ Poprawka: Wyświetlanie wyników 0.0 gdy pozycja wybita na pierwszej świeczce
✅ Dodano: Szczegółowe logi BE z informacjami o aktywacji i uderzeniu SL
✅ Poprawka: BE - nowy SL sprawdzany dopiero od następnej świeczki po aktywacji
✅ Dodano: Checkbox "Szczegółowe logi" w GUI do włączania/wyłączania logów świeczka po świeczce

PROBLEMY I ROZWIĄZANIA:
=======================

Problem: Program zaczynał obliczenia od świeczki następującej po otwarciu pozycji
Rozwiązanie: Zmieniono start_time na open_time - 60 w get_candles_for_position()

Problem: Nie wyświetlały się wyniki 0.0 w GUI  
Rozwiązanie: Zmieniono warunki z "if result.value" na "if result.value is not None"

Problem: BE aktywowane i sprawdzane na tej samej świeczce
Rozwiązanie: Dodano flagę be_activated_this_candle, SL sprawdzany od następnej świeczki

Problem: Za dużo logów zaśmiecało konsolę
Rozwiązanie: Dodano parametr detailed_logs w GUI i metodach

WSKAZÓWKI ROZWOJU:
==================
- Główna logika w candle_analyzer.py
- GUI w tp_calculator.py  
- Testy zawsze na małym zakresie dat
- detailed_logs=True dla debugowania
- Sprawdzaj czy świeczki są pobierane prawidłowo (komunikaty o liczbie świeczek)
- Zwracaj uwagę na konwersje: 1 punkt = 1.0 (nie dzielić przez 10000)

URUCHOMIENIE:
=============
python main.py

KONTAKT Z PROGRAMISTĄ:
=====================
Ten program był rozwijany we współpracy z Claude (Anthropic). 
Przy dalszych modyfikacjach pokazać ten plik dla kontekstu.

OSTATNIA AKTUALIZACJA: Czerwiec 2025 - Dodano statystyki winrate i SL per instrument
